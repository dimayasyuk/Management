/**!
 * @fileOverview Dropdowns.js - Simple & Beautiful Dropdowns
 * @version 1.0.0
 * @license
 * MIT License
 *
 * Copyright (c) 2017 Slooob
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
$.fn.extend({
    dropdown: function(trigger, options) {
        var defaults = {
            placement: 'bottom',
            container: $('body'),
            behavior: ['bottom', 'top'],
            animation: false,
            opened: false,
            theme: 'default'
        };

        options = $.extend(defaults, options);

        if (trigger) {
            options.container.prepend('<div class="dropdown' + (options.opened ? '' : ' dropdown-hidden') + (options.theme ? ' theme-' + options.theme : '') + (options.animation ? ' animation-' + options.animation : '') + '"></div>');
            var dropdown = options.container.find('.dropdown:first-child');
            $(this).detach().appendTo(dropdown);

            var popper = new Popper(trigger, dropdown, {
                placement: options.placement,
                modifiers: {
                    flip: {
                        behavior: options.behavior
                    },
                    preventOverflow: {
                        boundariesElement: options.container
                    }
                }
            });

            dropdownsInit(dropdown, trigger, options.opened);
        };
    }
});


function dropdownsInit(dropdown, trigger, options) {
    if (options.opened) {
        dropdownsToggle(dropdown);
    };
    trigger.click(function() {
        dropdownsToggle(dropdown);
        $(this).toggleClass('open');
    })

    if (options.theme == 'android') {
        dropdown.css({ 'margin-top': '-' + trigger.height() })
    };
};


function dropdownsToggle(dropdown) {
    if (dropdown.hasClass('dropdown-hidden')) {
        var children = dropdown.children()
        children.hide();
        dropdown.fadeIn(250).removeClass('dropdown-hidden');
        setTimeout(function() {
            children.fadeIn(250);
        }, 250);
    } else {
        dropdown.children().fadeOut( 250, function() {
            dropdown.addClass('dropdown-hidden').fadeOut(250);
        });
    };
};
